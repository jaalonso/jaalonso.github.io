<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vestigium (Publicaciones sobre FunctionalProgramming)</title><link>https://jaalonso.github.io/vestigium/</link><description></description><atom:link href="https://jaalonso.github.io/vestigium/categories/functionalprogramming.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:"&gt;José A. Alonso&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 29 Jun 2025 06:45:36 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Readings shared June 28, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/29-readings_shared_06-28-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 28 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drops.dagstuhl.de/storage/00lipics/lipics-vol333-ecoop2025/LIPIcs.ECOOP.2025.14/LIPIcs.ECOOP.2025.14.pdf"&gt;IsaBIL: A framework for verifying (in)correctness of binaries in Isabelle/HOL&lt;/a&gt;. ~ Matt Griffin, Brijesh Dongol, Azalea Raad. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drops.dagstuhl.de/storage/00lipics/lipics-vol333-ecoop2025/LIPIcs.ECOOP.2025.31/LIPIcs.ECOOP.2025.31.pdf"&gt;Multiparty asynchronous session types: A mechanised proof of subject reduction&lt;/a&gt;. ~ Authors Dawit Tirore, Jesper Bengtson, Marco Carbone. #ITP #CoqProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://byorgey.github.io/blog/posts/2025/06/27/prefix-sums.html"&gt;Competitive programming in Haskell: prefix sums&lt;/a&gt;. ~ Brent Yorgey. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openreview.net/pdf?id=GCjsjnl8yA"&gt;ProofAug: Efficient neural theorem proving via fine-grained proof structure analysis&lt;/a&gt;. ~ Haoxiong Liu et als. #LLMs #ITP #IsabelleHOL #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/li-14"&gt;Curso "Lógica informática (2014-15)"&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/li-14/temas/temas-LI-2014-15.pdf"&gt;Temas de "Lógica informática" (curso 2014-15)&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/li-14/temas/ejercicios-LI-2014-15.pdf"&gt;Ejercicios de "Lógica informática" (curso 2014-15)&lt;/a&gt;. #Lógica&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/lmf-14"&gt;Curso "Lógica matemática y fundamentos (2014-15)"&lt;/a&gt;. #Lógica #Haskell #ProgramaciónFuncional #IsabelleHOL&lt;/li&gt;
&lt;/ul&gt;</description><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>LogicProgramming</category><category>Prolog</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/29-readings_shared_06-28-25/</guid><pubDate>Sun, 29 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 26, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/27-readings_shared_06-26-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 26 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/affine-group-schemes-hopf-algebra/"&gt;The correspondence between affine group schemes and Hopf algebras (in Lean)&lt;/a&gt;. ~ Yaël Dillies, Michał Mrugała, Andrew Yang. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://leanprover-community.github.io/blog/posts/searching-for-theorems-in-mathlib/"&gt;Searching for theorems in Mathlib&lt;/a&gt;. ~ Bolton Bailey. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Hidden_Number_Problem.html"&gt;The hidden number problem (in Isabelle/HOL)&lt;/a&gt;. ~ Sage Binder, Eric Ren, Katherine Kosaian. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Splitting_Framework.html"&gt;A modular splitting framework for saturation theorem proving (in Isabelle/HOL)&lt;/a&gt;. ~ Ghilain Bergeron, Florent Krasnopol, Sophie Tourret. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Sigmoid_Universal_Approximation.html"&gt;The sigmoid function and the universal approximation theorem (in Isabelle/HOL)&lt;/a&gt;. ~ Dustin Bryant, Jim Woodcock, Simon Foster. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://imiron.io/post/linkedin-queens/"&gt;Solving LinkedIn queens with Haskell&lt;/a&gt;. ~ Agnishom Chattopadhyay. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/live/9hrDm7xDpig"&gt;The Haskell Unfolder Episode 45: Haskell records in 2025&lt;/a&gt;. ~ Edsko de Vries, Andres Löh. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;/ul&gt;</description><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>Math</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/27-readings_shared_06-26-25/</guid><pubDate>Fri, 27 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 25, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/26-readings_shared_06-25-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 25 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://byorgey.github.io/blog/posts/2025/06/23/range-queries-classified.html"&gt;Competitive programming in Haskell: range queries, classified&lt;/a&gt;. ~ Brent Yorgey. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mmhaskell.com/blog/2025/6/23/the-sliding-window-in-haskell-amp-rust"&gt;Comparing codes: The sliding window in Haskell &amp;amp; Rust&lt;/a&gt;. ~ James Bowen. #Haskell #FunctionalProgramming #Rust&lt;/li&gt;
&lt;/ul&gt;</description><category>FunctionalProgramming</category><category>Haskell</category><category>Rust</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/26-readings_shared_06-25-25/</guid><pubDate>Thu, 26 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 23, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/24-readings_shared_06-23-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 23 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://studenttheses.uu.nl/bitstream/handle/20.500.12932/49043/MSc.%20Thesis,%20Sam%20Lindauer,%20Mathematical%20Sciences.pdf"&gt;Formalising differential geometry and topology in Lean: Differential forms and the Whitney–Graustein theorem&lt;/a&gt;. ~ Sam J. L. Lindauer. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philarchive.org/archive/SHKAVA"&gt;A verified algebra of cognition: A Coq formalization of the distinction field&lt;/a&gt;. ~ Andrey Shkursky. #ITP #CoqProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2412.20878"&gt;A formal correctness proof of Edmonds' blossom shrinking algorithm&lt;/a&gt;. ~ Mohammad Abdulaziz. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.17104"&gt;Towards advanced mathematical reasoning for LLMs via first-order logic theorem proving&lt;/a&gt;. ~ Chuxue Cao et als. #LLMs #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/i1m-14"&gt;Curso "Informática (2014-15)"&lt;/a&gt;. #Haskell #ProgramaciónFuncional #Algorítmica #CálculoSimbólico #Maxima&lt;/li&gt;
&lt;/ul&gt;</description><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Math</category><category>Maxima</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/24-readings_shared_06-23-25/</guid><pubDate>Tue, 24 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 21, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/22-readings_shared_06-21-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 21 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://lean-lang.org/theorem_proving_in_lean4/"&gt;Theorem proving in Lean 4&lt;/a&gt;. ~ Jeremy Avigad, Leonardo de Moura, Soonho Kong, Sebastian Ullrich et als. #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.cmu.edu/~mheule/publications/scpog-SAT25.pdf"&gt;Certifying projected knowledge compilation&lt;/a&gt;. ~ Randal E. Bryant, Yong Kiam Tan, Marijn J. H. Heule. #ITP #HOL4&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.12212v1"&gt;Freer arrows and why you need them in Haskell&lt;/a&gt;. ~ Grant VanDomelen, Gan Shen, Lindsey Kuper, Yao Li. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3732771.3742710"&gt;Property-based testing of attribute grammars&lt;/a&gt;. ~ José Nuno Macedo, Marcos Viera, João Saraiva. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/li-13"&gt;Curso "Lógica informática (2013-14)"&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/lmf-13"&gt;Curso "Lógica matemática y fundamentos (2013-14)"&lt;/a&gt;. #Lógica #Haskell #ProgramaciónFuncional #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/m-ra-13"&gt;Curso "Razonamiento automático (2013-14)"&lt;/a&gt;. #RazonamientoAutomático #DemostraciónInteractiva #IsabelleHOL&lt;/li&gt;
&lt;/ul&gt;</description><category>FunctionalProgramming</category><category>Haskell</category><category>HOL4</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>Logic</category><category>LogicProgramming</category><category>Prolog</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/22-readings_shared_06-21-25/</guid><pubDate>Sun, 22 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 17, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/18-readings_shared_06-17-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 17 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/JOSHCLUNE/LeanHammer"&gt;LeanHammer: an automated reasoning tool for Lean which combines multiple techniques for proof search and formal reconstruction&lt;/a&gt;. ~ Joshua Clune et als. #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://byorgey.github.io/blog/posts/2025/06/16/monads-are-not-burritos.html"&gt;Monads are not like burritos&lt;/a&gt;. ~ Brent Yorgey. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://mmhaskell.com/blog/2025/6/16/two-pointer-algorithms"&gt;Comparing codes: Two pointer algorithms&lt;/a&gt;. ~ James Bowen. #Haskell #FunctionalProgramming #Rust&lt;/li&gt;
&lt;li&gt;&lt;a href="https://well-typed.com/blog/2025/06/ghci-multiple-home-units/"&gt;Making GHCi compatible with multiple home units&lt;/a&gt;. ~ Hannes Siebenhandl, Matthew Pickering. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;/ul&gt;</description><category>FunctionalProgramming</category><category>Haskell</category><category>ITP</category><category>LeanProver</category><category>RustLang</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/18-readings_shared_06-17-25/</guid><pubDate>Wed, 18 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 15, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/16-readings_shared_06-15-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 15 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.dcs.gla.ac.uk/~michele/papers/SAC2025.pdf"&gt;BiCoq: Bigraphs formalisation with Coq&lt;/a&gt;. ~ Cécile Marcon et als. #ITP #CoqProver #Rocq #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://byorgey.github.io/blog/posts/2025/06/10/comprog-hs-intro.html"&gt;Introduction to competitive programming in Haskell&lt;/a&gt;. ~ Brent Yorgey. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/meooow25/haccepted"&gt;Data structures and algorithms for competitive programming in Haskell&lt;/a&gt;. ~ Soumik Sarkar. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/HUkBz-cdB-k"&gt;Hardest problems in mathematics, physics &amp;amp; the future of AI&lt;/a&gt;. ~ Terence Tao, Lex Fridman. #ITP #LeanProver #AI #Math #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/qtVjx9mKVoE"&gt;Hablemos de LISP&lt;/a&gt;. ~ Manuel Rubio, Antonio Rubio. #Lisp #Programming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/06/15-hardest-problems-in-mathematics-physics-the-future-of-ai/"&gt;Reseña de «Hardest problems in mathematics, physics &amp;amp; the future of AI»&lt;/a&gt;. #ITP #LeanProver #AI #Math #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/06/15-hablemos-de-lisp/"&gt;Reseña de «Hablemos de Lisp»&lt;/a&gt;. #Lisp #FunctionalProgramming&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>AIforMath</category><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>ITP</category><category>LeanProver</category><category>Lisp</category><category>Math</category><category>Programming</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/16-readings_shared_06-15-25/</guid><pubDate>Mon, 16 Jun 2025 06:00:00 GMT</pubDate></item><item><title>Reseña de «Hablemos de Lisp»</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/15-hablemos-de-lisp/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;El vídeo «&lt;a href="https://youtu.be/qtVjx9mKVoE"&gt;Hablemos de Lisp&lt;/a&gt;» presenta un diálogo que explora la historia,
conceptos fundamentales y legado duradero del lenguaje de programación
&lt;a href="https://es.wikipedia.org/wiki/Lisp"&gt;Lisp&lt;/a&gt;. El análisis comienza con una perspectiva histórica rigurosa,
desmitificando la creencia común de que fue el primer &lt;a href="https://es.wikipedia.org/wiki/Programaci%C3%B3n_funcional"&gt;lenguaje
funcional&lt;/a&gt;. En su lugar, identifica al &lt;a href="https://en.wikipedia.org/wiki/Information_Processing_Language"&gt;IPL (Information Processing
Language)&lt;/a&gt; de &lt;a href="https://en.wikipedia.org/wiki/Herbert_A._Simon"&gt;Herbert Simon&lt;/a&gt; y &lt;a href="https://en.wikipedia.org/wiki/Allen_Newell"&gt;Allen Newell&lt;/a&gt; como su precursor
fundamental.&lt;/p&gt;
&lt;h2&gt;Contexto histórico y pioneros&lt;/h2&gt;
&lt;p&gt;El vídeo establece una distinción crucial entre los diferentes pioneros
de la &lt;a href="https://en.wikipedia.org/wiki/Artificial_intelligence"&gt;inteligencia artificial&lt;/a&gt;: mientras que Simon y Newell sentaron las
bases conceptuales del campo, &lt;a href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)"&gt;John McCarthy&lt;/a&gt; acuñó el término
"inteligencia artificial" y creó LISP, inspirado precisamente por las
capacidades de procesamiento de listas que había demostrado IPL.&lt;/p&gt;
&lt;h2&gt;La naturaleza funcional de LISP&lt;/h2&gt;
&lt;p&gt;Respecto al &lt;a href="https://en.wikipedia.org/wiki/Functional_programming"&gt;paradigma funcional&lt;/a&gt;, el análisis revela que LISP, en sus
primeras etapas, no cumplía estrictamente con los principios de la
programación funcional moderna, como la inmutabilidad y la gestión
explícita de efectos secundarios. La formalización teórica de este
paradigma se atribuye posteriormente a la familia de lenguajes &lt;a href="https://en.wikipedia.org/wiki/ISWIM"&gt;ISWIM&lt;/a&gt;,
propuesta por &lt;a href="https://en.wikipedia.org/wiki/Peter_Landin"&gt;Peter Landin&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Evolución técnica y conceptual&lt;/h2&gt;
&lt;p&gt;La génesis de la implementación de LISP se sigue de &lt;a href="https://justine.lol/sectorlisp/flpl-the-lisp-competitor.pdf"&gt;FLPL (Fortran Lisp
Processing Language)&lt;/a&gt;, un lenguaje intermedio que resultó fundamental
por introducir la expresión condicional, una construcción sintáctica que
más tarde sería adoptada ampliamente por lenguajes imperativos.&lt;/p&gt;
&lt;h2&gt;El momento decisivo: concepto versus implementación&lt;/h2&gt;
&lt;p&gt;Una de las discusiones más reveladoras del vídeo aborda la distinción
entre el concepto original de LISP (1959) y &lt;a href="https://history.siam.org/sup/Fox_1960_LISP.pdf"&gt;su primera implementación
(1960)&lt;/a&gt;. McCarthy había concebido inicialmente una sintaxis de alto
nivel (&lt;a href="https://en.wikipedia.org/wiki/M-expression"&gt;M-expresión&lt;/a&gt;) que se compilaría a una representación simbólica
intermedia (&lt;a href="https://en.wikipedia.org/wiki/S-expression"&gt;S-expresión&lt;/a&gt;). Sin embargo, el éxito de la implementación de
la función &lt;a href="https://en.wikipedia.org/wiki/Eval#Lisp"&gt;eval&lt;/a&gt; puso de manifiesto la profunda simetría entre código y
datos —la &lt;a href="https://en.wikipedia.org/wiki/Homoiconicity"&gt;homoiconicidad&lt;/a&gt;— inherente a la S-expresión.&lt;/p&gt;
&lt;p&gt;Esta propiedad fundamental resultó tan poderosa que llevó al abandono de
la M-expresión, convirtiendo la sintaxis intermedia en el lenguaje de
programación definitivo.&lt;/p&gt;
&lt;h2&gt;Legado e influencia contemporánea&lt;/h2&gt;
&lt;p&gt;El vídeo concluye evaluando el legado perdurable de LISP en la ciencia
de la computación. Se le atribuye la introducción de conceptos
fundamentales como la &lt;a href="https://en.wikipedia.org/wiki/Conditional_(computer_programming)"&gt;expresión condicional&lt;/a&gt; y la recolección automática
de basura (&lt;a href="https://en.wikipedia.org/wiki/Garbage_collection_(computer_science)"&gt;garbage collection&lt;/a&gt;). Su relevancia actual se manifiesta a
través de sus numerosos &lt;a href="https://en.wikipedia.org/wiki/Lisp_(programming_language)#Major_dialects"&gt;dialectos modernos&lt;/a&gt;, destacando &lt;a href="https://en.wikipedia.org/wiki/Common_Lisp"&gt;Common Lisp&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Scheme_(programming_language)"&gt;Scheme&lt;/a&gt;, &lt;a href="https://en.wikipedia.org/wiki/Clojure"&gt;Clojure&lt;/a&gt; y &lt;a href="https://en.wikipedia.org/wiki/Racket_(programming_language)"&gt;Racket&lt;/a&gt;, que continúan explorando y expandiendo los
principios originales del lenguaje.&lt;/p&gt;</description><category>FunctionalProgramming</category><category>Lisp</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/15-hablemos-de-lisp/</guid><pubDate>Sun, 15 Jun 2025 14:00:00 GMT</pubDate></item><item><title>Readings shared June 14, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/15-readings_shared_06-14-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 14 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://amslaurea.unibo.it/id/eprint/32676/1/MasterThesis.pdf"&gt;Formalizing information theory in Lean 4: divergences, hypothesis testing and the data processing inequality&lt;/a&gt;. ~ Lorenzo Luccioli. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://amslaurea.unibo.it/id/eprint/35220/1/TESI_MAGISTRALE_MARCO_PETRACCI-finale.pdf"&gt;Collaboration and innovation in the Equational Theories Project: Formalizing mathematics with Lean 4&lt;/a&gt;. ~ Marco Petracci. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://irreal.org/blog/?p=13051"&gt;Is Emacs an operating system?&lt;/a&gt; #Emacs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/m-ra-12"&gt;Curso "Razonamiento automático (2012-13)"&lt;/a&gt;. #RazonamientoAutomático #DemostraciónInteractiva #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/i1m-13"&gt;Curso "Informática (2013-14)"&lt;/a&gt;. #Haskell #ProgramaciónFuncional #Algorítmica #CálculoSimbólico #Maxima&lt;/li&gt;
&lt;/ul&gt;</description><category>Algorithms</category><category>Emacs</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>Math</category><category>Maxima</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/15-readings_shared_06-14-25/</guid><pubDate>Sun, 15 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 12, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/13-readings_shared_06-12-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 12 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/live/R2t9ZRWiWEk"&gt;Formalizing the divided power envelope in Lean&lt;/a&gt;. ~ María Inés de Frutos Fernández. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/live/YtbfIjgzNDI"&gt;Lean meta-theory: The proofs behind the proofs&lt;/a&gt;. ~ Mario Carneiro. #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/litexlang/golitex"&gt;Litex: Scale formal reasoning in AI age&lt;/a&gt;. ~ Jiachen Shen. #Logic #ATP #LitexLang&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neus-2025.github.io/files/papers/paper_33.pdf"&gt;Lean Copilot: Large language models as copilots for theorem proving in Lean&lt;/a&gt;. ~ Peiyang Song, Kaiyu Yang, Anima Anandkumar. #ITP #LeanProver #LLMs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3713082.3730382"&gt;Can large language models verify system software? A case study using FSCQ as a benchmark&lt;/a&gt;. ~ Jianxing Qin et als. #LLMs #ITP #CoqProver #Rocq&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muratkasimov.art/Ya/Articles/Reinventing-records-and-variants"&gt;Reinventing records and variants&lt;/a&gt;. ~ Murat Kasimov. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;/ul&gt;</description><category>ATP</category><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>Math</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/13-readings_shared_06-12-25/</guid><pubDate>Fri, 13 Jun 2025 08:40:00 GMT</pubDate></item></channel></rss>
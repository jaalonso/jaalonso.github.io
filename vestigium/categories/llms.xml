<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vestigium (Publicaciones sobre LLMs)</title><link>https://jaalonso.github.io/vestigium/</link><description></description><atom:link href="https://jaalonso.github.io/vestigium/categories/llms.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2025 &lt;a href="mailto:"&gt;José A. Alonso&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sat, 05 Jul 2025 07:24:13 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Readings shared July 4, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/07/05-readings_shared_07-04-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 4 July 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.22005v1"&gt;LeanConjecturer: Automatic generation of mathematical conjectures for theorem proving&lt;/a&gt;. ~ Naoto Onda et als. #ITP #LeanProver #Math #LLMs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.cs.uoregon.edu/research/summerschool/summer25/_lectures/Pientka-book-oplss.pdf"&gt;An introduction logical foundations of types and programming language&lt;/a&gt;. ~ Brigitte Pientka. #TypeTheory&lt;/li&gt;
&lt;li&gt;&lt;a href="https://academy.fpblock.com/blog/rust-haskell-reflections"&gt;Reflections on Haskell and Rust&lt;/a&gt;. ~ Sibi Prabakaran. #Haskell #FunctionalProgramming #Rust&lt;/li&gt;
&lt;li&gt;&lt;a href="https://youtu.be/H32kyA4BMz4"&gt;Category theory: Introducing the perfect language&lt;/a&gt;. ~ Richard Southwell #CategoryTheory&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/07/04-leanconjecturer-automatic-generation-of-mathematical-conjectures-for-theorem-proving/"&gt;Reseña de «LeanConjecturer: Automatic generation of mathematical conjectures for theorem proving»&lt;/a&gt;. #ITP #LeanProver #Math #LLMs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/m-ra-17"&gt;Curso "Razonamiento automático (2017-18)"&lt;/a&gt;. #RazonamientoAutomático #DemostraciónInteractiva #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/lmf-17"&gt;Curso "Lógica matemática y fundamentos (2017-18)"&lt;/a&gt;. #Lógica #IsabelleHOL&lt;/li&gt;
&lt;/ul&gt;</description><category>CategoryTheory</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>Math</category><category>Rust</category><category>TypeTheory</category><guid>https://jaalonso.github.io/vestigium/posts/2025/07/05-readings_shared_07-04-25/</guid><pubDate>Sat, 05 Jul 2025 04:00:00 GMT</pubDate></item><item><title>Reseña de «LeanConjecturer: Automatic generation of mathematical conjectures for theorem proving»</title><link>https://jaalonso.github.io/vestigium/posts/2025/07/04-leanconjecturer-automatic-generation-of-mathematical-conjectures-for-theorem-proving/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;El campo de la demostración automática de teoremas se enfrenta a un
obstáculo fundamental: a pesar del enorme potencial de los modelos de
lenguaje para el razonamiento matemático, su progreso se ve frenado por
la drástica escasez de datos de entrenamiento formales y de alta
calidad. A diferencia de los vastos corpus de texto general, las
bibliotecas matemáticas como &lt;a href="https://leanprover-community.github.io/mathlib-overview.html"&gt;Mathlib&lt;/a&gt; son relativamente pequeñas, lo que
limita la capacidad de estos sistemas para aprender y mejorar.&lt;/p&gt;
&lt;p&gt;Para resolver este desafío, en el artículo &lt;a href="https://arxiv.org/pdf/2506.22005"&gt;LeanConjecturer: Automatic
generation of mathematical conjectures for theorem
proving&lt;/a&gt; se presenta una innovadora metodología para generar nuevas
conjeturas de manera automática. El sistema adopta un enfoque híbrido:
primero, extrae el contexto matemático (definiciones, variables) de un
archivo de &lt;a href="https://en.wikipedia.org/wiki/Lean_(proof_assistant)"&gt;Lean&lt;/a&gt; existente, y luego utiliza un modelo de lenguaje
exclusivamente para la tarea creativa de proponer nuevos enunciados de
teoremas. Estas propuestas se someten a un proceso de filtrado iterativo
para garantizar que sean sintácticamente correctas, novedosas y no
triviales, alimentando las conjeturas válidas de nuevo al sistema para
inspirar generaciones futuras cada vez más complejas.&lt;/p&gt;
&lt;p&gt;El resultado es un éxito rotundo: el sistema no solo logra generar miles
de conjeturas válidas y desafiantes, sino que demuestra su utilidad
práctica al ser utilizadas para entrenar y mejorar el rendimiento de un
demostrador de teoremas de vanguardia. Más allá de simplemente crear
datos, LeanConjecturer fue capaz de formular y verificar teoremas
genuinamente interesantes en el campo de la topología, estableciendo
nuevas conexiones entre conceptos matemáticos. Con ello, el proyecto no
solo ofrece una solución escalable al problema de la escasez de datos,
sino que también abre una prometedora vía hacia la colaboración entre
humanos y máquinas en el descubrimiento de nuevas matemáticas.&lt;/p&gt;</description><category>ITP</category><category>LeanProver</category><category>LLMs</category><guid>https://jaalonso.github.io/vestigium/posts/2025/07/04-leanconjecturer-automatic-generation-of-mathematical-conjectures-for-theorem-proving/</guid><pubDate>Fri, 04 Jul 2025 09:00:00 GMT</pubDate></item><item><title>Readings shared June 29, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/30-readings_shared_06-29-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 29 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://link.springer.com/article/10.1007/s10817-025-09724-x"&gt;Constructing the Lie algebra of smooth vector fields on a Lie group in Isabelle/HOL&lt;/a&gt;. ~ Richard Schmoetten, Jacques D. Fleuriot. #ITP #IsabelleHOL #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://inria.hal.science/hal-05128954/document"&gt;A Rocq formalization of simplicial Lagrange finite elements&lt;/a&gt;. ~ Sylvie Boldo, François Clément, Vincent Martin, Micaela Mayero, Houda Mouhcine. #ITP #Rocq #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://aaltodoc.aalto.fi/server/api/core/bitstreams/e401c1e1-3dcb-4a31-b832-5ace8081dee9/content"&gt;Formal correctness proof of a mapping from a software specification language to the relational algebra&lt;/a&gt;. ~ Stan Dargent. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://eprintspublications.npl.co.uk/10181/1/MS60.pdf"&gt;Functional programming (with some type theory) for metrology&lt;/a&gt;. ~ André Videla, Keith Lines. #Haskell #Idris #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.19923v1"&gt;Prover Agent: An agent-based framework for formal mathematical proofs&lt;/a&gt;. ~ Kaito Baba, Chaoran Liu, Shuhei Kurita, Akiyoshi Sannai. #LLMs #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://link.springer.com/article/10.1007/s12065-025-01062-6"&gt;Pearclustering: a novel clustering algorithm with an application to bike mobility&lt;/a&gt;. ~ Francisco Marquez-Saldaña, Gonzalo A. Aranda-Corral, Joaquín Borrego-Díaz. #AI&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/m-ra-14"&gt;Curso "Razonamiento automático (2014-15)"&lt;/a&gt;. #RazonamientoAutomático #DemostraciónInteractiva #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/i1m-15"&gt;Curso "Informática (2015-16)"&lt;/a&gt;. #Haskell #ProgramaciónFuncional #Algorítmica #CálculoSimbólico #Maxima&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/i1m-15/temas/2015-16-IM-temas-PF.pdf"&gt;Temas de "Programación funcional" (2015-16)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/i1m-15/ejercicios/ejercicios-I1M-2015.pdf"&gt;Ejercicios de programación funcional con Haskell (curso 2015–16)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/https://raw.githubusercontent.com/jaalonso/Examenes_de_PF_con_Haskell_Vol7/master/Libro/Examenes_de_PF_con_Haskell_Vol7.pdf"&gt;Exámenes de programación funcional con Haskell (curso 2015–16)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/li-15"&gt;Curso "Lógica informática (2015-16)&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/li-15/temas/temas-LI-2015-16.pdf"&gt;Temas de "Lógica informática" (curso 2015-16)&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/https://www.cs.us.es/~jalonso/cursos/li-15/ejercicios/ejercicios-LI-2015-16.pdf"&gt;Ejercicios de "Lógica informática" (curso 2015-16)&lt;/a&gt;. #Lógica&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/lmf-15"&gt;Curso "Lógica matemática y fundamentos (2015-16)"&lt;/a&gt;. #Lógica #Haskell #ProgramaciónFuncional #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/i1m-16"&gt;Curso "Informática (2016-17)"&lt;/a&gt;. #Haskell #ProgramaciónFuncional #Algorítmica #CálculoSimbólico #Maxima&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/i1m-16/temas/2016-17-IM-temas-PF.pdf"&gt;Temas de "Programación funcional" (2016-17)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/i1m-16/ejercicios/ejercicios-I1M-2016.pdf"&gt;Ejercicios de programación funcional con Haskell (curso 2016-17)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/https://raw.githubusercontent.com/jaalonso/Examenes_de_PF_con_Haskell_Vol8/master/Libro/Examenes_de_PF_con_Haskell_Vol8.pdf"&gt;Exámenes de programación funcional con Haskell (curso 2016-17)&lt;/a&gt;. #Haskell #ProgramaciónFuncional&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>FunctionalProgramming</category><category>Haskell</category><category>Idris</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>LogicProgramming</category><category>Math</category><category>Maxima</category><category>Prolog</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/30-readings_shared_06-29-25/</guid><pubDate>Mon, 30 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 28, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/29-readings_shared_06-28-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 28 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://drops.dagstuhl.de/storage/00lipics/lipics-vol333-ecoop2025/LIPIcs.ECOOP.2025.14/LIPIcs.ECOOP.2025.14.pdf"&gt;IsaBIL: A framework for verifying (in)correctness of binaries in Isabelle/HOL&lt;/a&gt;. ~ Matt Griffin, Brijesh Dongol, Azalea Raad. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://drops.dagstuhl.de/storage/00lipics/lipics-vol333-ecoop2025/LIPIcs.ECOOP.2025.31/LIPIcs.ECOOP.2025.31.pdf"&gt;Multiparty asynchronous session types: A mechanised proof of subject reduction&lt;/a&gt;. ~ Authors Dawit Tirore, Jesper Bengtson, Marco Carbone. #ITP #CoqProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://byorgey.github.io/blog/posts/2025/06/27/prefix-sums.html"&gt;Competitive programming in Haskell: prefix sums&lt;/a&gt;. ~ Brent Yorgey. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openreview.net/pdf?id=GCjsjnl8yA"&gt;ProofAug: Efficient neural theorem proving via fine-grained proof structure analysis&lt;/a&gt;. ~ Haoxiong Liu et als. #LLMs #ITP #IsabelleHOL #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/li-14"&gt;Curso "Lógica informática (2014-15)"&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/li-14/temas/temas-LI-2014-15.pdf"&gt;Temas de "Lógica informática" (curso 2014-15)&lt;/a&gt;. #Lógica #ProgramaciónLógica #Prolog&lt;/li&gt;
&lt;li&gt;&lt;a href="https://web.archive.org/web/http://www.cs.us.es/~jalonso/cursos/li-14/temas/ejercicios-LI-2014-15.pdf"&gt;Ejercicios de "Lógica informática" (curso 2014-15)&lt;/a&gt;. #Lógica&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/lmf-14"&gt;Curso "Lógica matemática y fundamentos (2014-15)"&lt;/a&gt;. #Lógica #Haskell #ProgramaciónFuncional #IsabelleHOL&lt;/li&gt;
&lt;/ul&gt;</description><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>LogicProgramming</category><category>Prolog</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/29-readings_shared_06-28-25/</guid><pubDate>Sun, 29 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 27, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/28-readings_shared_06-27-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 27 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://youtu.be/6uLXA9KROBg"&gt;Formalizing a proof in Lean by hand&lt;/a&gt;. ~ Terence Tao. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.18616v2"&gt;A formalization of the Ionescu-Tulcea theorem in Mathlib&lt;/a&gt;. ~ Etienne Marion. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2503.00959"&gt;Formalizing zeta and L-functions in Lean&lt;/a&gt;. ~ David Loeffler, Michael Stoll. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://thmprover.wordpress.com/2025/06/24/redefinitions-in-mizar/"&gt;Redefinitions in Mizar&lt;/a&gt;. ~ Alex Nelson. #ITP #Mizar #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://openreview.net/pdf?id=HuvAM5x2xG"&gt;Position: Formal mathematical reasoning (a new frontier in AI)&lt;/a&gt;. ~ Kaiyu Yang et als. #AI #LLMs #Math #AI4Math #ITP&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.18383v1"&gt;LOGICPO: Efficient translation of NL-based logical problems to FOL using LLMs and preference optimization&lt;/a&gt;. ~ Koushik Viswanadha, Deepanway Ghosal, Somak Aditay. #LLMs #Math #Autoformalization&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>AI4Math</category><category>Autoformalization</category><category>CategoryTheory</category><category>CompSci</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Math</category><category>Mizar</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/28-readings_shared_06-27-25/</guid><pubDate>Sat, 28 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 23, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/24-readings_shared_06-23-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 23 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://studenttheses.uu.nl/bitstream/handle/20.500.12932/49043/MSc.%20Thesis,%20Sam%20Lindauer,%20Mathematical%20Sciences.pdf"&gt;Formalising differential geometry and topology in Lean: Differential forms and the Whitney–Graustein theorem&lt;/a&gt;. ~ Sam J. L. Lindauer. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://philarchive.org/archive/SHKAVA"&gt;A verified algebra of cognition: A Coq formalization of the distinction field&lt;/a&gt;. ~ Andrey Shkursky. #ITP #CoqProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2412.20878"&gt;A formal correctness proof of Edmonds' blossom shrinking algorithm&lt;/a&gt;. ~ Mohammad Abdulaziz. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.17104"&gt;Towards advanced mathematical reasoning for LLMs via first-order logic theorem proving&lt;/a&gt;. ~ Chuxue Cao et als. #LLMs #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/cursos/i1m-14"&gt;Curso "Informática (2014-15)"&lt;/a&gt;. #Haskell #ProgramaciónFuncional #Algorítmica #CálculoSimbólico #Maxima&lt;/li&gt;
&lt;/ul&gt;</description><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Math</category><category>Maxima</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/24-readings_shared_06-23-25/</guid><pubDate>Tue, 24 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 19, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/20-readings_shared_06-19-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 19 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Galois_Energy_Games.html"&gt;Galois energy games (in Isabelle/HOL)&lt;/a&gt;. ~ Caroline Lemke. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Chomsky_Schuetzenberger.html"&gt;Chomsky-Schützenberger representation theorem (in Isabelle/HOL)&lt;/a&gt;. ~ Moritz Roos. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.isa-afp.org/entries/Dyck_Language.html"&gt;Dyck language (in Isabelle/HOL)&lt;/a&gt;. ~ Tobias Nipkow, Moritz Roos. #ITP #IsabelleHOL&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3729331"&gt;Making concurrent hardware verification sequential&lt;/a&gt;. ~ Thomas Bourgeat, Jiazheng Liu, Adam Chlipala, Arvind. #ITP #CoqProver #Rocq&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.11487v1"&gt;Reviving DSP for advanced theorem proving in the era of reasoning models&lt;/a&gt;. ~ Chenrui Cao, Liangcheng Song, Zenan Li, Xinyi Le, Xian Zhang, Hui Xue, Fan Yang. #AI #Math #AIforMath #LLMs #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/06/19-can-ai-quicken-the-pace-of-math-discovery/"&gt;Reseña de «Can A.I. quicken the pace of math discovery?»&lt;/a&gt;. #AI #Math #AIforMath #ITP #LeanProver&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>AIforMath</category><category>CoqProver</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Math</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/20-readings_shared_06-19-25/</guid><pubDate>Fri, 20 Jun 2025 04:00:00 GMT</pubDate></item><item><title>Readings shared June 13, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/14-readings_shared_06-13-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 13 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2503.00959"&gt;Formalizing zeta and L-functions in Lean&lt;/a&gt;. ~ David Loeffler, Michael Stoll. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="http://adam.chlipala.net/theses/teshome.pdf"&gt;Formal verification of relational algebra transformations in Fiat2 using Coq&lt;/a&gt;. ~ Christian Teshome. #ITP #CoqProver #Rocq&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.10048"&gt;Growing a modular framework for modal systems - HOLMS: a HOL Light library&lt;/a&gt;. ~ Antonella Bilotta. #ITP #HOL_Light #Logic #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.morph.so/blog/trinity"&gt;Trinity: an autoformalization system for verified superintelligence&lt;/a&gt;. #Autoformalization #AIforMath #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/morph-labs/lean-abc-true-almost-always"&gt;The abc conjecture almost always — autoformalized&lt;/a&gt;. ~ Jesse Michael Han et als. #Autoformalization #AIforMath #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.06034"&gt;MATP-BENCH: Can MLLM be a good automated theorem prover for multimodal problems?&lt;/a&gt; ~ Zhitao He et als. #AI #MLLMs #Math #ITP #IsabelleHOL #LeanProver #CoqProver #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.07047"&gt;Mathesis: Towards formal theorem proving from natural languages&lt;/a&gt;. ~ Yu Xuejun et als. #AI #LLMs #Math #ITP #LeanProver #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://arxiv.org/abs/2506.10558"&gt;StepProof: Step-by-step verification of natural language mathematical proofs&lt;/a&gt;. ~ Xiaolin Hu, Qinghua Zhou, Bogdan Grechuk, Ivan Y. Tyukin. #LLMs #ITP #IsabelleHOL #Math #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/06/13-resena-de-matp-bench-can-mllm-be-a-good-automated-theorem-prover-for-multimodal-problems/"&gt;Reseña de «MATP-BENCH: Can MLLM be a good automated theorem prover for multimodal problems?»&lt;/a&gt;. #AI #MLLMs #Math #ITP #IsabelleHOL #LeanProver #CoqProver #AIforMath&lt;/li&gt;
&lt;li&gt;&lt;a href="https://jaalonso.github.io/vestigium/posts/2025/06/13-resena-de-mathesis-towards-formal-theorem-proving-from-natural-languages/"&gt;Reseña de «Mathesis: Towards formal theorem proving from natural languages»&lt;/a&gt;. #AI #LLMs #Math #ITP #LeanProver #AIforMath&lt;/li&gt;
&lt;/ul&gt;</description><category>AI</category><category>AIforMath</category><category>Autoformalization</category><category>CoqProver</category><category>HOL_Light</category><category>IsabelleHOL</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>Math</category><category>MLLMs</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/14-readings_shared_06-13-25/</guid><pubDate>Sat, 14 Jun 2025 09:15:00 GMT</pubDate></item><item><title>Reseña de «Mathesis: Towards formal theorem proving from natural languages»</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/13-resena-de-mathesis-towards-formal-theorem-proving-from-natural-languages/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;En el artículo «&lt;a href="https://arxiv.org/abs/2506.07047"&gt;Mathesis: Towards formal theorem proving from natural
languages&lt;/a&gt;», se aborda la limitación clave de los demostradores de
teoremas: su dependencia de enunciados ya formalizados. El trabajo se
centra en el paso crítico de la 'autoformalización' —la traducción a un
lenguaje formal como &lt;a href="https://en.wikipedia.org/wiki/Lean_(proof_assistant)"&gt;Lean 4&lt;/a&gt;— y presenta Mathesis, un sistema integral
diseñado para automatizar todo el proceso.&lt;/p&gt;
&lt;p&gt;El sistema introduce un Mathesis-Autoformalizer entrenado mediante
aprendizaje por refuerzo para optimizar la traducción a código Lean. Su
rendimiento se evalúa con LeanScorer, y se pone a prueba en
Gaokao-Formal, un nuevo y exigente banco de pruebas. Finalmente,
Mathesis-Prover genera la demostración completa en Lean, asegurando que
la prueba final sea verificable.&lt;/p&gt;
&lt;p&gt;Los resultados demuestran que Mathesis alcanza un rendimiento de
vanguardia en varios bancos de prueba. El análisis revela una conclusión
crucial: las mejoras en la autoformalización impactan el éxito final
mucho más que las mejoras en el demostrador. Esto se explica porque si
el problema se traduce incorrectamente a código Lean, el demostrador
recibe una tarea mal planteada y no puede generar una prueba válida, sin
importar su potencia. El trabajo confirma así que una traducción inicial
de alta calidad es el factor más determinante para el éxito del proceso.&lt;/p&gt;</description><category>AI</category><category>AIforMath</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Math</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/13-resena-de-mathesis-towards-formal-theorem-proving-from-natural-languages/</guid><pubDate>Fri, 13 Jun 2025 16:35:00 GMT</pubDate></item><item><title>Readings shared June 12, 2025</title><link>https://jaalonso.github.io/vestigium/posts/2025/06/13-readings_shared_06-12-25/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;The readings shared in &lt;a href="https://bsky.app/profile/jalonso.bsky.social"&gt;Bluesky&lt;/a&gt; on 12 June 2025 are&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/live/R2t9ZRWiWEk"&gt;Formalizing the divided power envelope in Lean&lt;/a&gt;. ~ María Inés de Frutos Fernández. #ITP #LeanProver #Math&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.youtube.com/live/YtbfIjgzNDI"&gt;Lean meta-theory: The proofs behind the proofs&lt;/a&gt;. ~ Mario Carneiro. #ITP #LeanProver&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/litexlang/golitex"&gt;Litex: Scale formal reasoning in AI age&lt;/a&gt;. ~ Jiachen Shen. #Logic #ATP #LitexLang&lt;/li&gt;
&lt;li&gt;&lt;a href="https://neus-2025.github.io/files/papers/paper_33.pdf"&gt;Lean Copilot: Large language models as copilots for theorem proving in Lean&lt;/a&gt;. ~ Peiyang Song, Kaiyu Yang, Anima Anandkumar. #ITP #LeanProver #LLMs&lt;/li&gt;
&lt;li&gt;&lt;a href="https://dl.acm.org/doi/pdf/10.1145/3713082.3730382"&gt;Can large language models verify system software? A case study using FSCQ as a benchmark&lt;/a&gt;. ~ Jianxing Qin et als. #LLMs #ITP #CoqProver #Rocq&lt;/li&gt;
&lt;li&gt;&lt;a href="https://muratkasimov.art/Ya/Articles/Reinventing-records-and-variants"&gt;Reinventing records and variants&lt;/a&gt;. ~ Murat Kasimov. #Haskell #FunctionalProgramming&lt;/li&gt;
&lt;/ul&gt;</description><category>ATP</category><category>CoqProver</category><category>FunctionalProgramming</category><category>Haskell</category><category>ITP</category><category>LeanProver</category><category>LLMs</category><category>Logic</category><category>Math</category><category>Rocq</category><guid>https://jaalonso.github.io/vestigium/posts/2025/06/13-readings_shared_06-12-25/</guid><pubDate>Fri, 13 Jun 2025 08:40:00 GMT</pubDate></item></channel></rss>
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Calculemus (Demostraciones con Lean4 e Isabelle/HOL) (Publicaciones sobre Orden_superior)</title><link>https://jaalonso.github.io/Calculemus24/</link><description></description><atom:link href="https://jaalonso.github.io/Calculemus24/categories/orden_superior.xml" rel="self" type="application/rss+xml"></atom:link><language>es</language><copyright>Contents © 2024 &lt;a href="mailto:"&gt;José A. Alonso&lt;/a&gt; 
&lt;a rel="license" href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;
&lt;img alt="Creative Commons License BY-NC-SA"
style="border-width:0; margin-bottom:12px;"
src="https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sat, 20 Apr 2024 10:50:49 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>f[s] ∩ t = f[s ∩ f⁻¹[t]]</title><link>https://jaalonso.github.io/Calculemus24/posts/interseccion_con_la_imagen/</link><dc:creator>José A. Alonso</dc:creator><description>&lt;p&gt;Demostrar con Lean4 que
\[ f[s] ∩ t = f[s ∩ f⁻¹[t]] \]&lt;/p&gt;
&lt;p&gt;Para ello, completar la siguiente teoría de Lean4:&lt;/p&gt;
&lt;p&gt;{{&amp;lt; highlight lean4 &amp;gt;}}
import Mathlib.Data.Set.Function
import Mathlib.Tactic&lt;/p&gt;
&lt;p&gt;open Set&lt;/p&gt;
&lt;p&gt;variable {α β : Type _}
variable (f : α → β)
variable (s : Set α)
variable (t : Set β)&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by sorry
{{&amp;lt;/ highlight &amp;gt;}}&lt;/p&gt;
&lt;!--more--&gt;

&lt;h3&gt;1. Demostración en lenguaje natural&lt;/h3&gt;
&lt;p&gt;Tenemos que demostrar que, para toda \(y\),
\[ y ∈ f[s] ∩ t ↔ y ∈ f[s ∩ f⁻¹[t]] \]
Lo haremos probando las dos implicaciones.&lt;/p&gt;
&lt;p&gt;(⟹) Supongamos que \(y ∈ f[s] ∩ t\). Entonces, se tiene que
\begin{align}
   &amp;amp;y ∈ f[s] \tag{1} \\
   &amp;amp;y ∈ t    \tag{2}
\end{align}
Por (1), existe un \(x\) tal que
\begin{align}
   &amp;amp;x ∈ s     \tag{3} \\
   &amp;amp;f(x) = y  \tag{4}
\end{align}
Por (2) y (4),
\[ f(x) ∈ t \]
y, por tanto,
\[ x ∈ f⁻¹[t] \]
que, junto con (3), da
\{ x ∈ s ∩ f⁻¹[t] \]
y, por tanto,
\[ f(x) ∈ f[s ∩ f⁻¹[t]] \]
que, junto con (4), da
\[ y ∈ f[s ∩ f⁻¹[t]] \]&lt;/p&gt;
&lt;p&gt;(⟸) Supongamos que \(y ∈ f[s ∩ f⁻¹[t]]\). Entonces, existe un \(x\) tal que
\begin{align}
   &amp;amp;x ∈ s ∩ f⁻¹[t] \tag{5} \\
   &amp;amp;f(x) = y       \tag{6}
\end{align}
Por (1), se tiene que
\begin{align}
   &amp;amp;x ∈ s      \tag{7} \\
   &amp;amp;x ∈ f⁻¹[t] \tag{8}
\end{align}
Por (7) se tiene que
\[ f(x) ∈ f[s] \]
y, junto con (6), se tiene que
\[ y ∈ f[s] \tag{9} \]
Por (8), se tiene que
\[ f(x) ∈ t \]
y, junto con (6), se tiene que
\[ y ∈ t \tag{10} \]
Por (9) y (19), se tiene que
\[ y ∈ f[s] ∩ t \]&lt;/p&gt;
&lt;h3&gt;2. Demostraciones con Lean4&lt;/h3&gt;
&lt;p&gt;{{&amp;lt; highlight haskell &amp;gt;}}
import Mathlib.Data.Set.Function
import Mathlib.Tactic&lt;/p&gt;
&lt;p&gt;open Set&lt;/p&gt;
&lt;p&gt;variable {α β : Type _}
variable (f : α → β)
variable (s : Set α)
variable (t : Set β)&lt;/p&gt;
&lt;p&gt;-- 1ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by
  ext y
  -- y : β
  -- ⊢ y ∈ f '' s ∩ t ↔ y ∈ f '' (s ∩ f ⁻¹' t)
  have h1 : y ∈ f '' s ∩ t → y ∈ f '' (s ∩ f ⁻¹' t) := by
    intro hy
    -- hy : y ∈ f '' s ∩ t
    -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t)
    have h1a : y ∈ f '' s := hy.1
    obtain ⟨x : α, hx: x ∈ s ∧ f x = y⟩ := h1a
    have h1b : x ∈ s := hx.1
    have h1c : f x = y := hx.2
    have h1d : y ∈ t := hy.2
    have h1e : f x ∈ t := by rwa [←h1c] at h1d
    have h1f : x ∈ s ∩ f ⁻¹' t := mem_inter h1b h1e
    have h1g : f x ∈ f '' (s ∩ f ⁻¹' t) := mem_image_of_mem f h1f
    show y ∈ f '' (s ∩ f ⁻¹' t)
    rwa [h1c] at h1g
  have h2 : y ∈ f '' (s ∩ f ⁻¹' t) → y ∈ f '' s ∩ t :=  by
    intro hy
    -- hy : y ∈ f '' (s ∩ f ⁻¹' t)
    -- ⊢ y ∈ f '' s ∩ t
    obtain ⟨x : α, hx : x ∈ s ∩ f ⁻¹' t ∧ f x = y⟩ := hy
    have h2a : x ∈ s := hx.1.1
    have h2b : f x ∈ f '' s := mem_image_of_mem f h2a
    have h2c : y ∈ f '' s := by rwa [hx.2] at h2b
    have h2d : x ∈ f ⁻¹' t := hx.1.2
    have h2e : f x ∈ t := mem_preimage.mp h2d
    have h2f : y ∈ t := by rwa [hx.2] at h2e
    show y ∈ f '' s ∩ t
    exact mem_inter h2c h2f
  show y ∈ f '' s ∩ t ↔ y ∈ f '' (s ∩ f ⁻¹' t)
  exact ⟨h1, h2⟩&lt;/p&gt;
&lt;p&gt;-- 2ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by
  ext y
  -- y : β
  -- ⊢ y ∈ f '' s ∩ t ↔ y ∈ f '' (s ∩ f ⁻¹' t)
  constructor
  . -- ⊢ y ∈ f '' s ∩ t → y ∈ f '' (s ∩ f ⁻¹' t)
    intro hy
    -- hy : y ∈ f '' s ∩ t
    -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t)
    cases' hy with hyfs yt
    -- hyfs : y ∈ f '' s
    -- yt : y ∈ t
    cases' hyfs with x hx
    -- x : α
    -- hx : x ∈ s ∧ f x = y
    cases' hx with xs fxy
    -- xs : x ∈ s
    -- fxy : f x = y
    use x
    -- ⊢ x ∈ s ∩ f ⁻¹' t ∧ f x = y
    constructor
    . -- ⊢ x ∈ s ∩ f ⁻¹' t
      constructor
      . -- ⊢ x ∈ s
        exact xs
      . -- ⊢ x ∈ f ⁻¹' t
        rw [mem_preimage]
        -- ⊢ f x ∈ t
        rw [fxy]
        -- ⊢ y ∈ t
        exact yt
    . -- ⊢ f x = y
      exact fxy
  . -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t) → y ∈ f '' s ∩ t
    intro hy
    -- hy : y ∈ f '' (s ∩ f ⁻¹' t)
    -- ⊢ y ∈ f '' s ∩ t
    cases' hy with x hx
    -- x : α
    -- hx : x ∈ s ∩ f ⁻¹' t ∧ f x = y
    constructor
    . -- ⊢ y ∈ f '' s
      use x
      -- ⊢ x ∈ s ∧ f x = y
      constructor
      . -- ⊢ x ∈ s
        exact hx.1.1
      . -- ⊢ f x = y
        exact hx.2
    . -- ⊢ y ∈ t
      cases' hx with hx1 fxy
      -- hx1 : x ∈ s ∩ f ⁻¹' t
      -- fxy : f x = y
      rw [←fxy]
      -- ⊢ f x ∈ t
      rw [←mem_preimage]
      -- ⊢ x ∈ f ⁻¹' t
      exact hx1.2&lt;/p&gt;
&lt;p&gt;-- 3ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by
  ext y
  -- y : β
  -- ⊢ y ∈ f '' s ∩ t ↔ y ∈ f '' (s ∩ f ⁻¹' t)
  constructor
  . -- ⊢ y ∈ f '' s ∩ t → y ∈ f '' (s ∩ f ⁻¹' t)
    rintro ⟨⟨x, xs, fxy⟩, yt⟩
    -- yt : y ∈ t
    -- x : α
    -- xs : x ∈ s
    -- fxy : f x = y
    -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t)
    use x
    -- ⊢ x ∈ s ∩ f ⁻¹' t ∧ f x = y
    constructor
    . -- ⊢ x ∈ s ∩ f ⁻¹' t
      constructor
      . -- ⊢ x ∈ s
        exact xs
      . -- ⊢ x ∈ f ⁻¹' t
        rw [mem_preimage]
        -- ⊢ f x ∈ t
        rw [fxy]
        -- ⊢ y ∈ t
        exact yt
    . -- ⊢ f x = y
      exact fxy
  . -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t) → y ∈ f '' s ∩ t
    rintro ⟨x, ⟨xs, xt⟩, fxy⟩
    -- x : α
    -- fxy : f x = y
    -- xs : x ∈ s
    -- xt : x ∈ f ⁻¹' t
    -- ⊢ y ∈ f '' s ∩ t
    constructor
    . -- ⊢ y ∈ f '' s
      use x, xs
      -- ⊢ f x = y
      exact fxy
    . -- ⊢ y ∈ t
      rw [←fxy]
      -- ⊢ f x ∈ t
      rw [←mem_preimage]
      -- ⊢ x ∈ f ⁻¹' t
      exact xt&lt;/p&gt;
&lt;p&gt;-- 4ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by
  ext y
  -- y : β
  -- ⊢ y ∈ f '' s ∩ t ↔ y ∈ f '' (s ∩ f ⁻¹' t)
  constructor
  . -- ⊢ y ∈ f '' s ∩ t → y ∈ f '' (s ∩ f ⁻¹' t)
    rintro ⟨⟨x, xs, fxy⟩, yt⟩
    -- yt : y ∈ t
    -- x : α
    -- xs : x ∈ s
    -- fxy : f x = y
    -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t)
    aesop
  . -- ⊢ y ∈ f '' (s ∩ f ⁻¹' t) → y ∈ f '' s ∩ t
    rintro ⟨x, ⟨xs, xt⟩, fxy⟩
    -- x : α
    -- fxy : f x = y
    -- xs : x ∈ s
    -- xt : x ∈ f ⁻¹' t
    -- ⊢ y ∈ f '' s ∩ t
    aesop&lt;/p&gt;
&lt;p&gt;-- 5ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
by ext ; constructor &amp;lt;;&amp;gt; aesop&lt;/p&gt;
&lt;p&gt;-- 6ª demostración
-- ===============&lt;/p&gt;
&lt;p&gt;example : (f '' s) ∩ t = f '' (s ∩ f ⁻¹' t) :=
(image_inter_preimage f s t).symm&lt;/p&gt;
&lt;p&gt;-- Lemas usados
-- ============&lt;/p&gt;
&lt;p&gt;-- variable (x : α)
-- variable (v : Set α)
-- #check (image_inter_preimage f s t : f '' (s ∩ f ⁻¹' t) = f '' s ∩ t)
-- #check (mem_image_of_mem f : x ∈ s → f x ∈ f '' s)
-- #check (mem_inter : x ∈ s → x ∈ v → x ∈ s ∩ v)
-- #check (mem_preimage : x ∈ f ⁻¹' t ↔ f x ∈ t)
{{&amp;lt;/ highlight &amp;gt;}}&lt;/p&gt;
&lt;p&gt;Se puede interactuar con las demostraciones anteriores en
&lt;a href="https://live.lean-lang.org/#url=https://raw.githubusercontent.com/jaalonso/Calculemus2/main/src/Interseccion_con_la_imagen.lean"&gt;Lean 4 Web&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;3. Demostraciones con Isabelle/HOL&lt;/h3&gt;
&lt;p&gt;{{&amp;lt; highlight ocaml &amp;gt;}}
theory Interseccion_con_la_imagen
imports Main
begin&lt;/p&gt;
&lt;p&gt;(&lt;em&gt; 1ª demostración &lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;lemma "(f &lt;code&gt;s) ∩ v = f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
proof (rule equalityI)
  show "(f&lt;/code&gt; s) ∩ v ⊆ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
  proof (rule subsetI)
    fix y
    assume "y ∈ (f &lt;code&gt;s) ∩ v"
    then show "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    proof (rule IntE)
      assume "y ∈ v"
      assume "y ∈ f&lt;/code&gt; s"
      then show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
      proof (rule imageE)
        fix x
        assume "x ∈ s"
        assume "y = f x"
        then have "f x ∈ v"
          using ‹y ∈ v› by (rule subst)
        then have "x ∈ f -&lt;code&gt;v"
          by (rule vimageI2)
        with ‹x ∈ s› have "x ∈ s ∩ f -&lt;/code&gt; v"
          by (rule IntI)
        then have "f x ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
          by (rule imageI)
        with ‹y = f x› show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
          by (rule ssubst)
      qed
    qed
  qed
next
  show "f &lt;code&gt;(s ∩ f -&lt;/code&gt; v) ⊆ (f &lt;code&gt;s) ∩ v"
  proof (rule subsetI)
    fix y
    assume "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    then show "y ∈ (f&lt;/code&gt; s) ∩ v"
    proof (rule imageE)
      fix x
      assume "y = f x"
      assume hx : "x ∈ s ∩ f -&lt;code&gt;v"
      have "y ∈ f&lt;/code&gt; s"
      proof -
        have "x ∈ s"
          using hx by (rule IntD1)
        then have "f x ∈ f &lt;code&gt;s"
          by (rule imageI)
        with ‹y = f x› show "y ∈ f&lt;/code&gt; s"
          by (rule ssubst)
      qed
      moreover
      have "y ∈ v"
      proof -
        have "x ∈ f -&lt;code&gt;v"
          using hx by (rule IntD2)
        then have "f x ∈ v"
          by (rule vimageD)
        with ‹y = f x› show "y ∈ v"
          by (rule ssubst)
      qed
      ultimately show "y ∈ (f&lt;/code&gt; s) ∩ v"
        by (rule IntI)
    qed
  qed
qed&lt;/p&gt;
&lt;p&gt;(&lt;em&gt; 2ª demostración &lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;lemma "(f &lt;code&gt;s) ∩ v = f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
proof
  show "(f&lt;/code&gt; s) ∩ v ⊆ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
  proof
    fix y
    assume "y ∈ (f &lt;code&gt;s) ∩ v"
    then show "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    proof
      assume "y ∈ v"
      assume "y ∈ f&lt;/code&gt; s"
      then show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
      proof
        fix x
        assume "x ∈ s"
        assume "y = f x"
        then have "f x ∈ v" using ‹y ∈ v› by simp
        then have "x ∈ f -&lt;code&gt;v" by simp
        with ‹x ∈ s› have "x ∈ s ∩ f -&lt;/code&gt; v" by simp
        then have "f x ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)" by simp
        with ‹y = f x› show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)" by simp
      qed
    qed
  qed
next
  show "f &lt;code&gt;(s ∩ f -&lt;/code&gt; v) ⊆ (f &lt;code&gt;s) ∩ v"
  proof
    fix y
    assume "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    then show "y ∈ (f&lt;/code&gt; s) ∩ v"
    proof
      fix x
      assume "y = f x"
      assume hx : "x ∈ s ∩ f -&lt;code&gt;v"
      have "y ∈ f&lt;/code&gt; s"
      proof -
        have "x ∈ s" using hx by simp
        then have "f x ∈ f &lt;code&gt;s" by simp
        with ‹y = f x› show "y ∈ f&lt;/code&gt; s" by simp
      qed
      moreover
      have "y ∈ v"
      proof -
        have "x ∈ f -&lt;code&gt;v" using hx by simp
        then have "f x ∈ v" by simp
        with ‹y = f x› show "y ∈ v" by simp
      qed
      ultimately show "y ∈ (f&lt;/code&gt; s) ∩ v" by simp
    qed
  qed
qed&lt;/p&gt;
&lt;p&gt;(&lt;em&gt; 3ª demostración &lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;lemma "(f &lt;code&gt;s) ∩ v = f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
proof
  show "(f&lt;/code&gt; s) ∩ v ⊆ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
  proof
    fix y
    assume "y ∈ (f &lt;code&gt;s) ∩ v"
    then show "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    proof
      assume "y ∈ v"
      assume "y ∈ f&lt;/code&gt; s"
      then show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
      proof
        fix x
        assume "x ∈ s"
        assume "y = f x"
        then show "y ∈ f &lt;code&gt;(s ∩ f -&lt;/code&gt; v)"
          using ‹x ∈ s› ‹y ∈ v› by simp
      qed
    qed
  qed
next
  show "f &lt;code&gt;(s ∩ f -&lt;/code&gt; v) ⊆ (f &lt;code&gt;s) ∩ v"
  proof
    fix y
    assume "y ∈ f&lt;/code&gt; (s ∩ f -&lt;code&gt;v)"
    then show "y ∈ (f&lt;/code&gt; s) ∩ v"
    proof
      fix x
      assume "y = f x"
      assume hx : "x ∈ s ∩ f -&lt;code&gt;v"
      then have "y ∈ f&lt;/code&gt; s" using ‹y = f x› by simp
      moreover
      have "y ∈ v" using hx ‹y = f x› by simp
      ultimately show "y ∈ (f ` s) ∩ v" by simp
    qed
  qed
qed&lt;/p&gt;
&lt;p&gt;(&lt;em&gt; 4ª demostración &lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;lemma "(f &lt;code&gt;s) ∩ v = f&lt;/code&gt; (s ∩ f -` v)"
  by auto&lt;/p&gt;
&lt;p&gt;end
{{&amp;lt;/ highlight &amp;gt;}}&lt;/p&gt;</description><category>Comprensión</category><category>Orden_superior</category><category>Recursión</category><guid>https://jaalonso.github.io/Calculemus24/posts/interseccion_con_la_imagen/</guid><pubDate>Tue, 09 Apr 2024 12:30:28 GMT</pubDate></item></channel></rss>